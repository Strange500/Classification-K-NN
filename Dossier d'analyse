# Titre

### Équipe 
*H2 - Roget Benjamin, Bollengier Mathys, Smeeckaert Thomas, Jacquemelle Vincent, Fryson Adrien*
 
### Organisation du travail

*Pour chaque membre de l'équipe, préciser en 2--3 lignes:*

- *Comment il ou elle a contribué au projet dans son ensemble.*
- *Comment il ou elle a contribuer plus particulièrement au dossier d'analyse.*

Benjamin Roget: j'ai contribué à la réalisation du projet via les commits liés à la visualisation des points, à la sélection des catégories, et à l'intégration du modèle observer/observable.
Concernant le dossier d'analyse, j'ai réalisé le diagramme de cas d'utilisation et j'ai participé à la réflexion sur le diagramme de classes.

Mathys Bollengier: J'ai contribué à la réalisation du projet au travers de commts liés à l'ajout des point et a sa classification en adéquation avec le cahier des charges.
Pour le dossier d'analyse, j'ai réalisé des fiches descriptives ainsi qu'à la réflexion du diagramme de classe.

Fryson Adrien : Dans le cadre de ce projet, j'ai pris en charge plusieurs aspects. Tout d'abord, j'ai conçu les classes principales du modèle, tout en veillant à créer une arborescence adaptée pour Maven et à configurer correctement le fichier pom.xml pour la gestion des dépendances. Par ailleurs, j'ai élaboré une première version de l'interface FXML en utilisant Scene Builder, en plus de gérer le chargement des données provenant d'un fichier CSV. J'ai également intégré la fonctionnalité permettant de charger un nouveau fichier CSV via l'interface JavaFX.
Concernant le dossier d'analyse, j'ai rédigé les fiches descriptives sur les fonctionnalités "Charger l'ensemble de données" et "Classifier la donnée non classifiée". J'ai également participé à la conception du diagramme de classe.

Vincent Jacquemelle : Dans le cadre de ce projet j'ai imaginé et réalisé [la maquette basse fidélité](https://www.figma.com/design/4VvLlFszeFe0WVyEIFU2Zu/Untitled?node-id=0-1&t=krNABrBBiuYGcEP8-1) sur figma.
Concernant le dossier d'analyse, j'ai participé à la réflexion sur les différents diagrammes réalisé 

Thomas Smeeckaert : Dans le cadre de ce projet j'ai participé a la conception de l'architecture du programme.

## Diagramme de cas d'utilisation


*Inclure le diagramme de cas d'utilisation, par exemple sous forme de capture d'écran.*
![Diagramme de cas d'utilisation](./Diagramme_de_cas_d_utilisation.PNG)


### Fiches descriptives

**Système** : Système de gestion de classification des données

**Cas d'utilisation** : Charger l'ensemble de données

**Acteur principal** : Utilisateur

**Déclencheur** : /

**Autres acteurs** : /

**Préconditions** :
    /

**Garanties en cas de succès** :
    On peut voir le nuage de points des données qui ont été chargées

**Garanties minimales** :
    Si le chargement échoue, il ne se passe rien

**Scénario nominal** :

1. L'utilisateur selectionne la fonctionnalité "Charger des données"
2. Le système affiche un explorateur de fichier pour selectionner le fichier.
3. L'utilisateur selectionne le fichier qu'il souhaite charger.
4. Le système s'occupe de charger le fichier et choisit des axes par défaut et affiche le nuage de points.

**Scénarios alternatifs** :
    Etape 4 : Si le fichier CSV est incorrect, le système propose de selectionner un autre fichier
    Retour à l'étape 2

-----------------------------------------------------------------------------------------------

**Système** : Système de gestion de classification des données

**Cas d'utilisation** : Ajouter un point avec ses données

**Acteur principal** : Utilisateur

**Déclencheur** : /

**Préconditions** : /

**Autres acteurs** : /

**Garanties en cas de succès** : Un point est apparu sur le graphique avec les bonnes coordonnées

**Garanties minimales** : Si les données sont mal ou pas rentrées le point ne se crée pas

**Scénario nominal** :

1. L'utilisateur selectionne la fonctionnalité "Ajouter un point"
2. Le système affiche un formulaire pour rentrer les données
3. L'utilisateur saisit les données du point et valide
4. Le système vérifie si les données sont correctement rentrées puis affiche le graphique avec le nouveau point bien visible

**Scénarios alternatifs** :
A. 4(A) Le système renvoie un message d'erreur si les données sont mal saisies
        (puis retour 3 scénario nominal)

-----------------------------------------------------------------------------------------------

**Système** : Système de gestion de classification des données

**Cas d'utilisation** : Classifier la donnée non classifiée

**Acteur principal** : Utilisateur

**Déclencheur** : /

**Autres acteurs** : /

**Préconditions** : 

L'utilisateur a chargé un fichier CSV

L'utilisateur a saisit un point

**Garanties en cas de succès** :
On peut savoir a quoi correspond la donnée entrée selon le fichier CSV

**Garanties minimales** :
Si la classification ne fonctionne pas, rien ne se passe

**Scénario nominal** :

1. L'utilisateur selectionne la fonctionnalité "Classifier"
2. Le système change la couleur du point qui était non classifié en fonction de sa catégorie.

**Scénarios alternatifs** :
/

### Prototypes pour l'interface

*Inclure des prototypes de l'interface utilisateur pour ces fonctionnalités:*

- *Ajouter une donnée*
![Ajouter une donnée init](./img/Init.png)
L'utilisateur clique sur le boutton ajouter Donnée comforme à l'étape 1 de la fiche descriptive.
![Ajouter une donnée](./img/Add.png)
L'interface permet la saisie de chaque champs, comforme a l'étape 2 de la fiche descriptive.
Une fois saisi l'utilisateur clique sur valider pour ajouter le point. Comforme à l'étape 3 de la fiche descriptive.
![Ajouter une donnée error](./img/IsAdded.png)
On peut voir le nouveaux point ajouter en haut a droite, la couleur noir signifie qu'il n'a pas était classifié. Comforme à l'étape 4 de la fiche descriptive.
- 
- *Classifier la donnée non classifiée*
![Classifier la donnée non classifiée](./img/InitClassifier.png)\
Pour classifier une donnée, l'utilisateur clique sur le boutton classifier.\ Comforme à l'étape 1 de la fiche descriptive.
![](./img/estClassifié.png)\
On peut voir que sa couleur a changé, cela signifie que le systéme a classé le point. \Comforme à l'étape 2 de la fiche descriptive.


- *Modifier les attributs pour l'affichage*
![](./img/Init.png)\
L'utilisateur peut selectioner les catégorie avec les liste déroulante à droite de l'écran
![](./img/CatChanged.png)
Une fois la selection terminer il peut cliquer sur valider. Ici les colonne selectionner sont : petalLength et SepalWidth
![](./img/viewchangeValidation.png)
Le systeme mets a jour la vue selon les paramétre données.

*Chaque prototype est constitué d'une suite d'écrans, ou d'une arborescence d'écrans si plusieurs chemins d'interaction sont possibles.*

*Pour les deux fonctionnalités dont on demande le prototype et la fiche descriptive, vous ferez le lien entre le prototype et la fiche descriptive. Plus précisément, pour chaque étape de la fiche descriptive, vous indiquerez à quel écran elle correspond. Vous pouvez par exemple mettre une légende sous l'écran, par ex. "Écran pour l'étape 3 de la fiche descriptive du UC Ajouter une donnée."*

*Les prototypes peuvent être en faible fidélité.*

*Les prototypes peuvent être dessinés à la main ou générés en utilisant un logiciel. Dans les deux cas, veillez à ce que les images soient lisibles et avec une bonne résolution (possibilité de zoomer pour lire le texte qui s'y trouve).*

## Diagramme de classes

*Inclure un diagramme de classes qui permet d'**implémenter toutes les fonctionnalités**.*
![Diagramme de classe](./DiagrammeClasse.png)
*Le diagramme de classes doit suivre le design pattern MVC, mais vous ne ferez pas figurer les classes de la vue. Il doit être clair quelles classes font partie du contrôleur (par exemple grâce à un nom de classe qui contient 'Controleur'); les classes restantes seront considérées faisant partie du modèle.*

*L'image du diagramme doit être de résolution suffisante permettant de zoomer et lire le texte qui y figure.*
